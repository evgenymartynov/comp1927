-- Evgeny Martynov, evgenym@cse
-- Competition submission (part 2) for 1927 asst2, 2012s2

-- Description: Draws 4 fractals:
--   * 2 different Julia sets
--   * 1 Mandelbrot set
--   * 1 Koch snowflake
--
-- This does not use many of FLan's combinators, but instead we use
-- functional paradigms and tricks.
-- For example, we use currying to specify different Julia sets with
-- just one base function.
-- We also pass functions into a fairly generic drawFractal procedure,
-- and use those to define Julia set fractals.
--
-- Requires Evgeny's modified (non-standard) flange.c for colour.
------------------------------------------------------------------------

-- Arranges 4 pictures in a grid
displayFour :: Picture -> Picture -> Picture -> Picture -> Picture
displayFour a b c d =
    Above 1 1
    (Beside 1 1 a b)
    (Beside 1 1 c d)
;

-- Overlays a list of pictures
overlayList :: [Picture] -> Picture
overlayList pics = match pics with
    []   -> Empty
|   x:xs -> Overlay x (overlayList xs)
end;

-- Draws the Koch Snowflake.
-- This is drastically different from the Julia/Mandelbrot fractals.
koch :: Num -> Picture
koch zlevel = let
    aux :: Num -> Num -> Num -> Num -> Num -> Picture
    aux zoom sx sy ex ey = let
        dx :: Num dx = ex-sx;
        dy :: Num dy = ey-sy;

        -- We *could* use rotations and picture-composition in FLan,
        -- but I could not get the rotations to work in a way that makes
        -- a proper Koch snowflake.

        -- We resort to doing trig by hand... and calculating each line
        -- segment by hand.

        hsqr    :: Num hsqr    = 0.866025404; -- sqrt(3)/2
        firstx  :: Num firstx  = (2*sx+ex)/3;
        firsty  :: Num firsty  = (2*sy+ey)/3;
        secondx :: Num secondx = (sx+2*ex)/3;
        secondy :: Num secondy = (sy+2*ey)/3;
        midx :: Num midx = firstx + (dx/3)/2 - (dy/3)*hsqr;
        midy :: Num midy = firsty + (dy/3)/2 + (dx/3)*hsqr;

        finalisePattern :: Num -> Num -> Num -> Num -> Picture
        finalisePattern sx sy ex ey = Canvas 100 100 [Line (sx, sy) (ex, ey)];

        next :: (Num -> Num -> Num -> Num -> Picture)
        next = if (zoom <= 0) then (finalisePattern) else (aux (zoom-1)) end;
    in overlayList
        [ (next sx sy firstx firsty)
        , (next firstx firsty midx midy)
        , (next midx midy secondx secondy)
        , (next secondx secondy ex ey)
        ];
in overlayList
    [ (aux zlevel 15 70 85 70)
    , (aux zlevel 50 9.3782 15 70)
    , (aux zlevel 85 70 50 9.3782)
    ];


-- This is a Julia-family fractal generator.
-- Takes in two functions which describe how we check the (x,y) pairs
-- for convergence.
drawFractal ::
    (Num -> Num -> Num -> Num -> Num) ->
    (Num -> Num -> Num -> Num -> Num) ->
    Num -> Num -> Num -> Picture
drawFractal xGenerator yGenerator cx cy zoomWidth = let
    maxIter :: Num
    maxIter = 150;

    colscale :: Num
    colscale = 256 / maxIter;

    -- Checks convergence of a point, i.e. does it belong to the set?
    numIterations :: Num -> Num -> Num
    numIterations px py = let
        auxConverges :: Num -> Num -> Num -> Num
        auxConverges x y iter =
            if (iter == maxIter || ((x*x) + (y*y)) > 4) then
                iter
            else
                auxConverges
                    (xGenerator x y px py)
                    (yGenerator x y px py)
                    (iter+1)
            end;
    in auxConverges px py 0;

    -- Converts the #iterations to some colour.
    colours :: Num -> (Num, Num, Num)
    colours n =
        ( ((n * colscale) * 1 % 256)
        , ((n * colscale) * 1.5 % 256)
        , ((n * colscale) * 2 % 256)
        );

    -- Draws a filled rectangle based on whether a given point converges
    polyOrEmpty :: [(Num, Num)] -> Num -> Num -> Picture
    polyOrEmpty points x y =
        if (numIterations x y) < maxIter then
            Canvas 100 100 [
                FilledPolygon (colours (numIterations x y) ) points
            ]
        else
            Empty
        end;

    -- We recursively subdivide the region into 4, and combine them.
    auxDraw :: Num -> Num -> Num -> Num -> Num -> Picture
    auxDraw x1 x2 y1 y2 depth =
        if depth == 0 then
            polyOrEmpty [(0, 0), (100, 0), (100, 100), (0, 100)] x1 y2
        else
            displayFour
                (auxDraw x1 (x1 + (x2-x1)/2)   y1 (y1 + (y2-y1)/2) (depth-1) )
                (auxDraw (x1 + (x2-x1)/2) x2   y1 (y1 + (y2-y1)/2) (depth-1) )
                (auxDraw x1 (x1 + (x2-x1)/2)   (y1 + (y2-y1)/2) y2 (depth-1) )
                (auxDraw (x1 + (x2-x1)/2) x2   (y1 + (y2-y1)/2) y2 (depth-1) )
        end
    ;
in auxDraw (cx-zoomWidth) (cx+zoomWidth) (cy-zoomWidth) (cy+zoomWidth) 6;


-- These determine the iterating/step functions of the Julia sets
juliaStepX :: Num -> Num -> Num -> Num -> Num -> Num
juliaStepX addX x y px py = (x*x - y*y + addX);
juliaStepY :: Num -> Num -> Num -> Num -> Num -> Num
juliaStepY addY x y px py = (2*x*y + addY);


-- These define the fractals themselves.
-- We curry juliaStepXY functions ^_^
juliaOne :: Picture
juliaOne = drawFractal (juliaStepX (0-0.8)) (juliaStepY 0.156) 0 0 0.5;

juliaTwo :: Picture
juliaTwo = drawFractal (juliaStepX 0.285) (juliaStepY 0.01) (0-0.6) (0-0.3) 0.25;

-- Mandelbrot is a bit different to Julia sets.
mandelbrot :: Picture
mandelbrot = let
    mandelXStep :: Num -> Num -> Num -> Num -> Num
    mandelXStep x y px py = (x*x - y*y + px);
    mandelYStep :: Num -> Num -> Num -> Num -> Num
    mandelYStep x y px py = (2*y*x     + py);
in drawFractal mandelXStep mandelYStep (0-0.745) 0.15 0.005;


-- And this one composes all four.
main = displayFour
    juliaOne   (koch 5)
    mandelbrot juliaTwo
